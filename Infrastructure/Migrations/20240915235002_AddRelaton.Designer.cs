// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AcademiaContext))]
    [Migration("20240915235002_AddRelaton")]
    partial class AddRelaton
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Roles", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Datetime");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("IdRole");

                    b.HasIndex("NameRole")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.UserCredentials", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("last_login")
                        .HasColumnType("datetime2");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<DateTime>("password_reset_expires")
                        .HasColumnType("DATETIME");

                    b.Property<string>("password_reset_token")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.HasKey("UserId");

                    b.ToTable("UsersCredentials", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UsersInRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersInRoles");
                });

            modelBuilder.Entity("Domain.Entities.UsersProfiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)");

                    b.HasKey("Id");

                    b.ToTable("UsersProfiles");
                });

            modelBuilder.Entity("Domain.Entities.UserCredentials", b =>
                {
                    b.HasOne("Domain.Entities.UsersProfiles", "UserProfile")
                        .WithOne("UserCredentials")
                        .HasForeignKey("Domain.Entities.UserCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Domain.Entities.UsersInRoles", b =>
                {
                    b.HasOne("Domain.Entities.Roles", "Role")
                        .WithMany("UsersInRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserCredentials", "User")
                        .WithMany("UsersInRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Roles", b =>
                {
                    b.Navigation("UsersInRoles");
                });

            modelBuilder.Entity("Domain.Entities.UserCredentials", b =>
                {
                    b.Navigation("UsersInRoles");
                });

            modelBuilder.Entity("Domain.Entities.UsersProfiles", b =>
                {
                    b.Navigation("UserCredentials")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
